以下是优化后的代码片段：

```javascript
// 设置 ESLint 忽略开发环境错误
process.env.ESLINT_NO_DEV_ERRORS = 'true';
```

以下是实现登录流程和校验管理员身份的伪代码：

```javascript
// 登录流程
function login(username, password) {
  // 校验用户名和密码
  if (!username || !password) {
    return '用户名或密码不能为空';
  }

  // 查询数据库，校验用户名和密码
  // 假设有一个 getUserByUsername 函数
  const user = getUserByUsername(username);
  if (!user || user.password !== password) {
    return '用户名或密码错误';
  }

  // 生成 token
  const token = generateToken(user);

  // 设置登录状态
  setLoginStatus(user);

  return `登录成功，token：${token}`;
}

// 校验是否为管理员
function checkAdmin(token) {
  // 解析 token，获取用户信息
  const user = parseToken(token);

  // 校验用户是否为管理员
  if (!user || user.role !== 'admin') {
    return '无权限';
  }

  return '管理员权限';
}

// 登录流程和校验管理员身份的完整实现
const username = 'admin';
const password = 'password123';
const loginResult = login(username, password);
console.log(loginResult);

const token = loginResult.split('：')[1].trim();
const checkResult = checkAdmin(token);
console.log(checkResult);
```

以下是实现 JavaScript 冒泡排序算法的伪代码：

```javascript
// 冒泡排序算法
function bubbleSort(arr) {
  const len = arr.length;
  for (let i = 0; i < len; i++) {
    for (let j = 0; j < len - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        // 交换相邻元素
        const temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
  return arr;
}

// 测试冒泡排序
const arr = [5, 3, 8, 4, 2];
console.log('原始数组：', arr);
const sortedArr = bubbleSort(arr);
console.log('排序后的数组：', sortedArr);
```

以下是实现 Python 快速排序算法的伪代码：

```python
# 快速排序算法
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

# 测试快速排序
arr = [5, 3, 8, 4, 2]
print('原始数组：', arr)
sorted_arr = quick_sort(arr)
print('排序后的数组：', sorted_arr)
```

以上是优化后的代码片段和实现不同功能的伪代码，供你参考。希望对你有所帮助。